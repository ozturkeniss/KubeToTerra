basePath: /api/v1
definitions:
  model.CreateOrderRequest:
    properties:
      price:
        example: 999.99
        type: number
      product_name:
        example: iPhone 15
        type: string
      quantity:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    required:
    - price
    - product_name
    - quantity
    - user_id
    type: object
  model.CreateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      username:
        example: johndoe
        type: string
    required:
    - email
    - first_name
    - last_name
    - username
    type: object
  model.OrderResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      price:
        example: 999.99
        type: number
      product_name:
        example: iPhone 15
        type: string
      quantity:
        example: 1
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/model.OrderStatus'
        example: pending
      updated_at:
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  model.OrderStatus:
    enum:
    - pending
    - confirmed
    - shipped
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusConfirmed
    - OrderStatusShipped
    - OrderStatusDelivered
    - OrderStatusCancelled
  model.UpdateOrderStatusRequest:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/model.OrderStatus'
        example: confirmed
    required:
    - status
    type: object
  model.UpdateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      username:
        example: johndoe
        type: string
    type: object
  model.UserResponse:
    properties:
      created_at:
        type: string
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      updated_at:
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is an order service API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Order Service API
  version: "1.0"
paths:
  /orders:
    get:
      consumes:
      - application/json
      description: Retrieve all orders in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.OrderResponse'
            type: array
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order with the provided information
      parameters:
      - description: Order information
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.OrderResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order by their ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Retrieve an order by their ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OrderResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get order by ID
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update an existing order's status
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated order status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/model.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OrderResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Update order status
      tags:
      - orders
  /orders/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all orders for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.OrderResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get orders by user ID
      tags:
      - orders
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResponse'
            type: array
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Update user
      tags:
      - users
  /users/email:
    get:
      consumes:
      - application/json
      description: Retrieve a user by their email address
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get user by email
      tags:
      - users
  /users/username:
    get:
      consumes:
      - application/json
      description: Retrieve a user by their username
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get user by username
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
